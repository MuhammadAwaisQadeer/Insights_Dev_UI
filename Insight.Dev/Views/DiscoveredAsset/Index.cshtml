@model List<Insight.Dev.Models.DiscoveredAsset>

<h2 class="mb-4">Asset Discovery Overview</h2>
<head>
    <meta charset="UTF-8">
    <title>Asset Discovery Overview</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
</head>


<!-- Summary Cards -->
<div class="row g-4">
    <div class="col-md-4">
        <div class="bg-white rounded-lg shadow-lg p-4 d-flex align-items-center">
            <div class="bg-primary text-white rounded-circle p-3 me-3">
                <i class="bi bi-hdd-network-fill fs-2"></i>
            </div>
            <div>
                <p class="text-muted mb-1">Total Assets</p>
                <h3 class="fw-semibold" id="total-assets">@Model.Count</h3>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="bg-white rounded-lg shadow-lg p-4 d-flex align-items-center">
            <div class="bg-warning text-white rounded-circle p-3 me-3">
                <i class="bi bi-hourglass-top fs-2"></i>
            </div>
            <div>
                <p class="text-muted mb-1">Pending Classification</p>
                <h3 class="fw-semibold">@Model.Count(a => !a.IsClassified)</h3>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="bg-white rounded-lg shadow-lg p-4 d-flex align-items-center">
            <div class="bg-danger text-white rounded-circle p-3 me-3">
                <i class="bi bi-shield-exclamation fs-2"></i>
            </div>
            <div>
                <p class="text-muted mb-1">Critical Assets</p>
                <h3 class="fw-semibold">@Model.Count(a => a.Criticality == "High")</h3>
            </div>
        </div>
    </div>
</div>

<!-- Classification Actions -->
<div class="mt-4 d-flex gap-3">
    <button id="approveAssets" class="btn btn-success"><i class="bi bi-check-circle-fill me-1"></i> Approve Selected</button>
    <button id="ignoreAssets" class="btn btn-warning"><i class="bi bi-dash-circle-fill me-1"></i> Ignore Selected</button>
    <button id="falsePositiveAssets" class="btn btn-danger"><i class="bi bi-x-circle-fill me-1"></i> Mark as False Positive</button>
</div>

<!-- Asset Table -->
<h3 class="mt-5">Assets Pending Classification</h3>
<div class="table-responsive">
    <table class="table table-hover table-bordered align-middle shadow-sm rounded">
        <thead class="table-primary">
            <tr>
                <th scope="col" class="text-center"><input type="checkbox" id="selectAll"></th>
                <th scope="col">Hostname <i class="bi bi-laptop-fill"></i></th>
                <th scope="col">IP Address <i class="bi bi-globe2"></i></th>
                <th scope="col">Asset Type <i class="bi bi-box-seam"></i></th>
                <th scope="col">Criticality <i class="bi bi-exclamation-octagon-fill"></i></th>
                <th scope="col">Discovery Date <i class="bi bi-calendar-week-fill"></i></th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var asset in Model.Where(a => !a.IsClassified))
            {
                <tr>
                    <td class="text-center"><input type="checkbox" class="form-check-input selectAsset" data-asset-id="@asset.Id"></td>
                    <td>@asset.Hostname</td>
                    <td>@asset.IPAddress</td>
                    <td>@asset.AssetType</td>
                    <td>
                        <span class="badge @((asset.Criticality == "High") ? "bg-danger" : (asset.Criticality == "Medium") ? "bg-warning" : "bg-success")">
                            @asset.Criticality
                        </span>
                    </td>
                    <td>@asset.DiscoveryDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    document.getElementById("selectAll").addEventListener("change", function () {
        document.querySelectorAll(".selectAsset").forEach(cb => cb.checked = this.checked);
    });

    function getSelectedAssets() {
        return Array.from(document.querySelectorAll(".selectAsset:checked"))
                     .map(cb => cb.dataset.assetId);
    }

    function handleAssetAction(apiEndpoint) {
        let selected = getSelectedAssets();
        if (selected.length === 0) return alert("Select at least one asset.");

        fetch(apiEndpoint, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(selected)
        }).then(() => location.reload())
          .catch(err => console.error("Error:", err));
    }

    document.getElementById("approveAssets").addEventListener("click", function() {
        handleAssetAction("/api/discoveredasset/approve");
    });

    document.getElementById("ignoreAssets").addEventListener("click", function() {
        handleAssetAction("/api/discoveredasset/ignore");
    });

    document.getElementById("falsePositiveAssets").addEventListener("click", function() {
        handleAssetAction("/api/discoveredasset/falsepositive");
    });
</script>
