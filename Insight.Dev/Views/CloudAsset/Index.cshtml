<h2 class="text-center mb-4">☁️ Cloud Asset Inventory</h2>

<div class="container shadow-lg p-4 rounded bg-white">
    <!-- Filter by Provider -->
    <div class="row mb-3">
        <div class="col-md-4">
            <label for="providerFilter" class="form-label fw-bold">🌐 Filter by Provider:</label>
            <select id="providerFilter" class="form-select shadow-sm" onchange="filterCloudAssets()">
                <option value="All">All Providers</option>
                <option value="AWS">AWS</option>
                <option value="Azure">Azure</option>
                <option value="GCP">GCP</option>
                <option value="IBM Cloud">IBM Cloud</option>
                <option value="Oracle Cloud">Oracle Cloud</option>
                <option value="Alibaba Cloud">Alibaba Cloud</option>
            </select>
        </div>
        <div class="col-md-8 text-end align-self-end">
            <!-- Export Buttons -->
            <button class="btn btn-success me-2 shadow-sm" onclick="exportCSV()">
                <i class="bi bi-file-earmark-spreadsheet"></i> Export to CSV
            </button>
            <button class="btn btn-danger shadow-sm" onclick="exportPDF()">
                <i class="bi bi-file-earmark-pdf"></i> Export to PDF
            </button>
        </div>
    </div>

    <!-- Cloud Assets Table -->
    <div class="table-responsive">
        <table class="table table-hover table-striped table-bordered rounded shadow-sm">
            <thead class="table-dark text-center">
                <tr>
                    <th style="cursor:pointer;" onclick="sortTable(0)">🔢 Asset ID</th>
                    <th style="cursor:pointer;" onclick="sortTable(1)">☁️ Provider</th>
                    <th style="cursor:pointer;" onclick="sortTable(2)">🌎 Region</th>
                    <th style="cursor:pointer;" onclick="sortTable(3)">📝 Type</th>
                    <th style="cursor:pointer;" onclick="sortTable(4)">⚡ Status</th>
                    <th>⚙️ Actions</th>
                </tr>
            </thead>
            <tbody id="cloudAssetsTable">
                <!-- Dynamic rows here -->
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <nav>
        <ul class="pagination justify-content-center" id="paginationControls"></ul>
    </nav>
</div>

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">

<!--  Script with Pagination -->
<script>
    let cloudAssetsData = [];
    let currentPage = 1;
    const rowsPerPage = 10;

    $(document).ready(function () {
        loadCloudAssets();
    });

    function loadCloudAssets() {
        $.getJSON("/api/cloud-assets/getAssets", function (data) {
            cloudAssetsData = data;
            displayPage(currentPage);
            setupPagination(cloudAssetsData);
        });
    }

    function filterCloudAssets() {
        const provider = $("#providerFilter").val();
        $.getJSON("/api/cloud-assets/getAssets", function (data) {
            cloudAssetsData = (provider === "All") ? data : data.filter(asset => asset.provider === provider);
            currentPage = 1;
            displayPage(currentPage);
            setupPagination(cloudAssetsData);
        });
    }

    function displayPage(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedData = cloudAssetsData.slice(start, end);
        updateTable(paginatedData);
    }

    function setupPagination(data) {
        const totalPages = Math.ceil(data.length / rowsPerPage);
        let paginationHTML = `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">&laquo;</a></li>`;
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `<li class="page-item ${currentPage === i ? 'active' : ''}">
                                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a></li>`;
        }
        paginationHTML += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">&raquo;</a></li>`;
        $("#paginationControls").html(paginationHTML);
    }

    function changePage(page) {
        const totalPages = Math.ceil(cloudAssetsData.length / rowsPerPage);
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            displayPage(currentPage);
            setupPagination(cloudAssetsData);
        }
    }

    function updateTable(data) {
        $("#cloudAssetsTable").empty();
        data.forEach(asset => {
            let statusBadge = getStatusBadge(asset.status);
            let row = `<tr>
                <td>${asset.assetId}</td>
                <td>${asset.provider}</td>
                <td>${asset.region}</td>
                <td>${asset.type}</td>
                <td>${statusBadge}</td>
                <td><button class="btn btn-info btn-sm shadow-sm">🔍 View Details</button></td>
            </tr>`;
            $("#cloudAssetsTable").append(row);
        });
    }

    function getStatusBadge(status) {
        let colorClass;
        switch (status) {
            case "Running": colorClass = "bg-success"; break;
            case "Stopped": colorClass = "bg-danger"; break;
            case "Active": colorClass = "bg-primary"; break;
            case "Pending": colorClass = "bg-warning text-dark"; break;
            default: colorClass = "bg-secondary";
        }
        return `<span class="badge ${colorClass} rounded-pill px-3 py-2">${status}</span>`;
    }

    function sortTable(columnIndex) {
        cloudAssetsData.sort((a, b) =>
            a[Object.keys(a)[columnIndex]].toString().localeCompare(b[Object.keys(b)[columnIndex]].toString())
        );
        displayPage(currentPage);
        setupPagination(cloudAssetsData);
    }

    function exportCSV() {
        let csvContent = "data:text/csv;charset=utf-8,Asset ID,Provider,Region,Type,Status\n";
        cloudAssetsData.forEach(asset => {
            csvContent += `${asset.assetId},${asset.provider},${asset.region},${asset.type},${asset.status}\n`;
        });
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", "Cloud_Assets.csv");
        document.body.appendChild(link);
        link.click();
    }

    function exportPDF() {
        let doc = new jsPDF();
        doc.text("☁️ Cloud Asset Inventory", 10, 10);
        let tableRows = cloudAssetsData.map(asset => [asset.assetId, asset.provider, asset.region, asset.type, asset.status]);
        doc.autoTable({ head: [["Asset ID", "Provider", "Region", "Type", "Status"]], body: tableRows });
        doc.save("Cloud_Assets.pdf");
    }
</script>
